{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","id","setId","client","io","localVideo","document","getElementById","remoteVideo","rtc","RTCPeerConnection","iceServers","urls","on","console","log","setVideo","event","setRemoteDescription","RTCSessionDescription","ontrack","e","srcObject","streams","addIceCandidate","candidate","navigator","mediaDevices","getUserMedia","video","audio","then","stream","getTracks","forEach","track","addTrack","type","value","onChange","target","onClick","emit","createOffer","offer","setLocalDescription","onicecandidate","irc","createAnswer","answer","autoPlay","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","component","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kPA2GeA,MAxGf,WAAgB,IAAD,EAESC,mBAAS,IAFlB,mBAEJC,EAFI,KAEAC,EAFA,KAGPC,EAASC,IAAG,sCAGZC,EAAaC,SAASC,eAAe,cACrCC,EAAcF,SAASC,eAAe,eAUpCE,EAAM,IAAIC,kBAAkB,CAAEC,WARjB,CACf,CAAEC,KAAM,gCACR,CAAEA,KAAM,iCACR,CAAEA,KAAM,iCACR,CAAEA,KAAM,iCACR,CAAEA,KAAM,oCAmCZT,EAAOU,GAAG,gBAAgB,WACtBC,QAAQC,IAAI,iBAAkBd,GAC9Be,EAASP,MAKbN,EAAOU,GAAG,eAAe,WACrBC,QAAQC,IAAI,gBAAiBd,GAC7Be,EAASP,MAIbN,EAAOU,GAAG,SAAS,SAAAI,GACfH,QAAQC,IAAI,SACZN,EAAIS,qBAAqB,IAAIC,sBAAsBF,OAIvDd,EAAOU,GAAG,UAAU,SAAAI,GAChBH,QAAQC,IAAI,UACZN,EAAIS,qBAAqB,IAAIC,sBAAsBF,OAIvDR,EAAIW,QAAU,SAAAC,GACVb,EAAYc,UAAYD,EAAEE,QAAQ,IAKtCpB,EAAOU,GAAG,aAAa,SAAAI,GACnBR,EAAIe,gBAAgBP,EAAMQ,cAE9B,IAAMT,EAAW,SAACP,GACdiB,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAASC,MAAK,SAAAC,GACpE3B,EAAWiB,UAAYU,EACvBA,EAAOC,YAAYC,SAAQ,SAAAC,GACvB1B,EAAI2B,SAASD,EAAOH,UAIhC,OACI,oCACI,2BAAOK,KAAK,OAAOC,MAAOrC,EAAIsC,SAAU,SAAAlB,GAAC,OAAInB,EAAMmB,EAAEmB,OAAOF,UAE5D,4BAAQG,QAAS,SAAApB,GA3ErBlB,EAAOuC,KAAK,OAAQzC,KA2EhB,WACA,4BAAQwC,QAAS,SAAApB,GAAC,OAtEtBZ,EAAIkC,cAAcZ,MAAK,SAAAa,GACnBnC,EAAIoC,oBAAoB,IAAI1B,sBAAsByB,IAClDzC,EAAOuC,KAAK,QAAS,CAAEzC,GAAIA,EAAI2C,MAAOA,YAE1CnC,EAAIqC,eAAiB,SAAAzB,GACbA,EAAEI,WAAWtB,EAAOuC,KAAK,YAAa,CAAEzC,GAAIA,EAAIwB,UAAWJ,EAAEI,UAAWsB,KAPhE,QAwEZ,QACA,4BAAQN,QAAS,SAAApB,GAAC,OAzDtBZ,EAAIuC,eAAejB,MAAK,SAAAkB,GACpBxC,EAAIoC,oBAAoB,IAAI1B,sBAAsB8B,IAClD9C,EAAOuC,KAAK,SAAU,CAAEzC,GAAIA,EAAIgD,OAAQA,YAE5CxC,EAAIqC,eAAiB,SAAAzB,GACbA,EAAEI,WAAWtB,EAAOuC,KAAK,YAAa,CAAEzC,GAAIA,EAAIwB,UAAWJ,EAAEI,gBAoDjE,UAA+C,6BAC/C,2BAAOxB,GAAG,aAAaiD,UAAQ,EAACC,OAAQ,MACxC,2BAAOlD,GAAG,cAAciD,UAAQ,EAACC,OAAQ,QC1FjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/D,OAIvCO,SAASC,eAAe,SDmHpB,kBAAmBmB,WACrBA,UAAUqC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.ddb24f6d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport io from 'socket.io-client';\n\nfunction App() {\n\n    const [id, setId] = useState('');\n    let client = io('https://rtc-test-11.herokuapp.com/');\n\n\n    let localVideo = document.getElementById('localVideo'),\n        remoteVideo = document.getElementById('remoteVideo');\n\n    const iceServers = [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' },\n        { urls: 'stun:stun3.l.google.com:19302' },\n        { urls: 'stun:stun4.l.google.com:19302' },\n    ];\n\n    const rtc = new RTCPeerConnection({ iceServers: iceServers });\n\n    const connect = () => {\n        client.emit('join', id);\n    }\n\n\n    let isRoomCreator = true;\n    const call = () => {\n        rtc.createOffer().then(offer => {\n            rtc.setLocalDescription(new RTCSessionDescription(offer));\n            client.emit('offer', { id: id, offer: offer });\n        })\n        rtc.onicecandidate = e => {\n            if (e.candidate) client.emit('candidate', { id: id, candidate: e.candidate, irc: isRoomCreator })\n        }\n\n\n\n    }\n\n\n    const answer = () => {\n        rtc.createAnswer().then(answer => {\n            rtc.setLocalDescription(new RTCSessionDescription(answer));\n            client.emit('answer', { id: id, answer: answer });\n        })\n        rtc.onicecandidate = e => {\n            if (e.candidate) client.emit('candidate', { id: id, candidate: e.candidate })\n        }\n    }\n\n    client.on('room_created', () => {\n        console.log('Room Created: ', id);\n        setVideo(rtc);\n\n\n    })\n\n    client.on('room_joined', () => {\n        console.log('Room Joined: ', id);\n        setVideo(rtc);\n    })\n\n\n    client.on('offer', event => {\n        console.log('Offer');\n        rtc.setRemoteDescription(new RTCSessionDescription(event));\n    });\n\n\n    client.on('answer', event => {\n        console.log('Answer');\n        rtc.setRemoteDescription(new RTCSessionDescription(event));\n    })\n\n\n    rtc.ontrack = e => {\n        remoteVideo.srcObject = e.streams[0];\n\n    }\n\n\n    client.on('candidate', event => {\n        rtc.addIceCandidate(event.candidate);\n    })\n    const setVideo = (rtc) => {\n        navigator.mediaDevices.getUserMedia({ video: true, audio: false }).then(stream => {\n            localVideo.srcObject = stream;\n            stream.getTracks().forEach(track => {\n                rtc.addTrack(track, stream);\n            })\n        })\n    }\n    return (\n        <>\n            <input type='text' value={id} onChange={e => setId(e.target.value)} />\n\n            <button onClick={e => connect()}>Connect</button>\n            <button onClick={e => call()}>Call</button>\n            <button onClick={e => answer()}>Answer</button><br />\n            <video id='localVideo' autoPlay height={200}></video>\n            <video id='remoteVideo' autoPlay height={200}></video>\n        </>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport App1 from './App1';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Route, BrowserRouter, Switch } from 'react-router-dom'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path='/' component={App} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}