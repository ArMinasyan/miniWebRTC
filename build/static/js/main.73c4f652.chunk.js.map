{"version":3,"sources":["App.js","App1.js","serviceWorker.js","index.js"],"names":["App","localVideoStream","isRoomCreator","rtcPeerConnection","roomId","useState","id","setId","socket","io","iceServers","urls","roomSelectionContainer","document","getElementById","videoChatContainer","localVideoComponent","remoteVideoComponent","mediaConstraints","audio","video","width","height","SWErrorAlert","msg","SweetAlert","title","text","icon","buttons","confirm","call","room","alert","emit","style","setLocalStream","a","navigator","mediaDevices","getUserMedia","then","stream","srcObject","catch","err","toString","error","console","addLocalTracks","getTracks","forEach","track","addTrack","createOffer","sessionDescription","setLocalDescription","type","sdp","createAnswer","setRemoteStream","event","streams","sendIceCandidate","candidate","label","sdpMLineIndex","on","log","RTCPeerConnection","ontrack","onicecandidate","setRemoteDescription","RTCSessionDescription","RTCIceCandidate","addIceCandidate","className","onChange","e","target","value","onClick","autoPlay","muted","App5","client","localVideo","remoteVideo","rtc","setVideo","offer","irc","answer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","component","App1","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.73c4f652.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport io from 'socket.io-client';\nimport SweetAlert from 'sweetalert';\n\nfunction App() {\n\n    const [id, setId] = useState();\n    const [offerData, setOfferData] = useState({});\n    const [answerData, setAnswerData] = useState({});\n    const [deviceID_0, setDeviceID_0] = useState('');\n    let socket = io('https://rtc-test-11.herokuapp.com/');\n    // navigator.getUserMedia = navigator.getUserMedia | navigator.webkitGetUserMedia | navigator.mozGetUserMedia | navigator.msGetUserMedia;\n    let iceServers = [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' },\n        { urls: 'stun:stun3.l.google.com:19302' },\n        { urls: 'stun:stun4.l.google.com:19302' },\n    ]\n    const roomSelectionContainer = document.getElementById('room-selection-container')\n    const roomInput = document.getElementById('room-input')\n    const connectButton = document.getElementById('connect-button')\n\n    const videoChatContainer = document.getElementById('video-chat-container')\n    const localVideoComponent = document.getElementById('local-video')\n    const remoteVideoComponent = document.getElementById('remote-video')\n\n    const mediaConstraints = {\n        audio: false,\n        video: { width: 1280, height: 720 },\n    }\n\n    let SWErrorAlert = (msg) => {\n\n        SweetAlert({\n            title: 'Error',\n            text: msg,\n            icon: 'error',\n            buttons: {\n                confirm: { text: 'OK' },\n            }\n        })\n    }\n\n\n    let localVideoStream;\n    let remoteVideoStream;\n    let isRoomCreator;\n    let rtcPeerConnection;\n    let roomId;\n\n\n\n    // BUTTON LISTENER ============================================================\n    let call = () => {\n        joinRoom(id)\n    }\n\n    // SOCKET EVENT CALLBACKS =====================================================\n    socket.on('room_created', async () => {\n        console.log('Socket event callback: room_created')\n\n        await setLocalStream(mediaConstraints)\n        isRoomCreator = true\n    })\n\n    socket.on('room_joined', async () => {\n        console.log('Socket event callback: room_joined')\n\n        await setLocalStream(mediaConstraints)\n        socket.emit('start_call', roomId)\n    })\n\n    socket.on('full_room', () => {\n        console.log('Socket event callback: full_room')\n\n        alert('The room is full, please try another one')\n    })\n\n    socket.on('start_call', async () => {\n        console.log('Socket event callback: start_call')\n\n        if (isRoomCreator) {\n            rtcPeerConnection = new RTCPeerConnection(iceServers);\n            addLocalTracks(rtcPeerConnection);\n            rtcPeerConnection.ontrack = setRemoteStream;\n            rtcPeerConnection.onicecandidate = sendIceCandidate;\n            await createOffer(rtcPeerConnection);\n        }\n    })\n\n    socket.on('webrtc_offer', async (event) => {\n        console.log('Socket event callback: webrtc_offer');\n\n        if (!isRoomCreator) {\n            rtcPeerConnection = new RTCPeerConnection(iceServers);\n            addLocalTracks(rtcPeerConnection);\n            rtcPeerConnection.ontrack = setRemoteStream;\n            rtcPeerConnection.onicecandidate = sendIceCandidate;\n            rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(event));\n            await createAnswer(rtcPeerConnection);\n        }\n    })\n\n    socket.on('webrtc_answer', (event) => {\n        console.log('Socket event callback: webrtc_answer')\n\n        rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(event))\n    })\n\n    socket.on('webrtc_ice_candidate', (event) => {\n\n        var candidate = new RTCIceCandidate({\n            sdpMLineIndex: event.label,\n            candidate: event.candidate,\n        })\n        rtcPeerConnection.addIceCandidate(candidate)\n    })\n\n    // FUNCTIONS ==================================================================\n    function joinRoom(room) {\n        if (room === '') {\n            alert('Please type a room ID')\n        } else {\n            roomId = room\n            socket.emit('join', room)\n            showVideoConference()\n        }\n    }\n\n    function showVideoConference() {\n        roomSelectionContainer.style = 'display: none'\n        videoChatContainer.style = 'display: block'\n    }\n\n    async function setLocalStream(mediaConstraints) {\n\n\n        try {\n\n\n            navigator.mediaDevices.getUserMedia({ audio: false, video: true }).then(stream => {\n                localVideoStream = stream\n                localVideoComponent.srcObject = stream\n            }).catch(err => {\n                SWErrorAlert(err.toString())\n            });\n\n\n\n        } catch (error) {\n            console.error('Could not get user media', error)\n        }\n\n\n    }\n\n    function addLocalTracks(rtcPeerConnection) {\n\n        localVideoStream.getTracks().forEach((track) => {\n            rtcPeerConnection.addTrack(track, localVideoStream)\n        })\n    }\n\n    async function createOffer(rtcPeerConnection) {\n        let sessionDescription\n        try {\n            sessionDescription = await rtcPeerConnection.createOffer()\n            rtcPeerConnection.setLocalDescription(sessionDescription)\n        } catch (error) {\n            console.error(error)\n        }\n\n        socket.emit('webrtc_offer', {\n            type: 'webrtc_offer',\n            sdp: sessionDescription,\n            roomId,\n        })\n    }\n\n    async function createAnswer(rtcPeerConnection) {\n        let sessionDescription\n        try {\n            sessionDescription = await rtcPeerConnection.createAnswer()\n            rtcPeerConnection.setLocalDescription(sessionDescription)\n        } catch (error) {\n            console.error(error)\n        }\n\n        socket.emit('webrtc_answer', {\n            type: 'webrtc_answer',\n            sdp: sessionDescription,\n            roomId,\n        })\n    }\n\n    function setRemoteStream(event) {\n        remoteVideoComponent.srcObject = event.streams[0]\n        remoteVideoStream = event.stream\n    }\n\n    function sendIceCandidate(event) {\n        if (event.candidate) {\n            socket.emit('webrtc_ice_candidate', {\n                roomId,\n                label: event.candidate.sdpMLineIndex,\n                candidate: event.candidate.candidate,\n            })\n        }\n    }\n\n    const answer = () => {\n\n    }\n\n    return (\n        <>\n            <div id=\"room-selection-container\" className=\"centered\">\n                <input id=\"room-input\" type=\"text\" onChange={e => setId(e.target.value)} />\n                <button id=\"connect-button\" onClick={e => call()}>CALL</button>\n                <button id=\"connect-button\" onClick={e => answer()}>ANSWER</button>\n            </div>\n\n            <div id=\"video-chat-container\" className=\"video-position\">\n                <video id=\"local-video\" autoPlay muted=\"muted\"></video>\n                <video id=\"remote-video\" autoPlay></video>\n            </div>\n        </>\n\n    )\n\n}\n\nexport default App;","import React, { useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nfunction App5() {\r\n\r\n    const [id, setId] = useState('');\r\n    let client = io('https://rtc-test-11.herokuapp.com/');\r\n\r\n\r\n    let localVideo = document.getElementById('localVideo'),\r\n        remoteVideo = document.getElementById('remoteVideo');\r\n\r\n    const iceServers = [\r\n        { urls: 'stun:stun.l.google.com:19302' },\r\n        { urls: 'stun:stun1.l.google.com:19302' },\r\n        { urls: 'stun:stun2.l.google.com:19302' },\r\n        { urls: 'stun:stun3.l.google.com:19302' },\r\n        { urls: 'stun:stun4.l.google.com:19302' },\r\n    ];\r\n\r\n    const rtc = new RTCPeerConnection({ iceServers: iceServers });\r\n\r\n    const connect = () => {\r\n        client.emit('join', id);\r\n    }\r\n\r\n\r\n    let isRoomCreator = true;\r\n    const call = () => {\r\n        rtc.createOffer().then(offer => {\r\n            rtc.setLocalDescription(new RTCSessionDescription(offer));\r\n            client.emit('offer', { id: id, offer: offer });\r\n        })\r\n        rtc.onicecandidate = e => {\r\n            if (e.candidate) client.emit('candidate', { id: id, candidate: e.candidate, irc: isRoomCreator })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    const answer = () => {\r\n        rtc.createAnswer().then(answer => {\r\n            rtc.setLocalDescription(new RTCSessionDescription(answer));\r\n            client.emit('answer', { id: id, answer: answer });\r\n        })\r\n        rtc.onicecandidate = e => {\r\n            if (e.candidate) client.emit('candidate', { id: id, candidate: e.candidate })\r\n        }\r\n    }\r\n\r\n    client.on('room_created', () => {\r\n        console.log('Room Created: ', id);\r\n        setVideo(rtc);\r\n\r\n\r\n    })\r\n\r\n    client.on('room_joined', () => {\r\n        console.log('Room Joined: ', id);\r\n        setVideo(rtc);\r\n    })\r\n\r\n\r\n    client.on('offer', event => {\r\n        console.log('Offer');\r\n        rtc.setRemoteDescription(new RTCSessionDescription(event));\r\n    });\r\n\r\n\r\n    client.on('answer', event => {\r\n        console.log('Answer');\r\n        rtc.setRemoteDescription(new RTCSessionDescription(event));\r\n    })\r\n\r\n\r\n    rtc.ontrack = e => {\r\n        remoteVideo.srcObject = e.streams[0];\r\n\r\n    }\r\n\r\n\r\n    client.on('candidate', event => {\r\n        rtc.addIceCandidate(event.candidate);\r\n    })\r\n    const setVideo = (rtc) => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: false }).then(stream => {\r\n            localVideo.srcObject = stream;\r\n            stream.getTracks().forEach(track => {\r\n                rtc.addTrack(track, stream);\r\n            })\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <input type='text' value={id} onChange={e => setId(e.target.value)} />\r\n\r\n            <button onClick={e => connect()}>Connect</button>\r\n            <button onClick={e => call()}>Call</button>\r\n            <button onClick={e => answer()}>Answer</button><br />\r\n            <video id='localVideo' autoPlay height={200}></video>\r\n            <video id='remoteVideo' autoPlay height={200}></video>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App5;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport App1 from './App1';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Route, BrowserRouter, Switch } from 'react-router-dom'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path='/' component={App} />\r\n        <Route exact path='/app1' component={App1} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}