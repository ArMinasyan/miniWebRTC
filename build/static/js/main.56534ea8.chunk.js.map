{"version":3,"sources":["App.js","App2.js","App3.js","serviceWorker.js","index.js"],"names":["App","useState","id","setId","socket","io","pc1","RTCPeerConnection","iceServers","urls","credential","username","call","a","navigator","mediaDevices","getUserMedia","video","stream","addTrack","getVideoTracks","createOffer","offer","setLocalDescription","emit","onicecandidate","e","console","log","candidate","on","answer","setRemoteDescription","addIceCandidate","type","onChange","target","value","onClick","autoPlay","App3","localStream","isRoomCreator","rtcPeerConnection","roomId","deviceID_0","setDeviceID_0","roomSelectionContainer","document","getElementById","videoChatContainer","localVideoComponent","remoteVideoComponent","mediaConstraints","audio","width","height","enumerateDevices","then","device","filter","elem","kind","connect","room","alert","style","setLocalStream","deviceId","srcObject","error","addLocalTracks","getTracks","forEach","track","sessionDescription","sdp","createAnswer","setRemoteStream","event","streams","sendIceCandidate","label","sdpMLineIndex","ontrack","RTCSessionDescription","RTCIceCandidate","className","muted","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","path","component","App2","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.56534ea8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n\n\nfunction App() {\n\n\n    const [id, setId] = useState();\n    const [offerData, setOfferData] = useState({});\n    const [answerData, setAnswerData] = useState({});\n\n\n    let socket = io('http://localhost:8000');\n\n    let iceServers = [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' },\n        {\n            urls: 'turn:numb.viagenie.ca',\n            credential: 'muazkh',\n            username: 'webrtc@live.com'\n        },\n        {\n            urls: 'turn:192.158.29.39:3478?transport=udp',\n            credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n            username: '28224511:1379330808'\n        }, {\n            urls: \"turn:13.250.13.83:3478?transport=udp\",\n            username: \"YzYNCouZM1mhqhmseWk6\",\n            credential: \"YzYNCouZM1mhqhmseWk6\"\n        }\n    ]\n\n\n    const pc1 = new RTCPeerConnection({ iceServers: iceServers });\n\n    const connect = () => { socket.emit('join', id) };\n    const call = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        pc1.addTrack(stream.getVideoTracks()[0], stream);\n       \n        const offer = await pc1.createOffer();\n        await pc1.setLocalDescription(offer);\n        socket.emit('offer_pc1', { id: id, offer });\n        pc1.onicecandidate = e => {\n            console.log(e.candidate);\n            socket.emit('candidate', { id: id, candidate: e.candidate })\n        }\n    };\n\n    \n    const answer = () => { }\n    socket.on('answer_pc2', async answer => {\n        await pc1.setRemoteDescription(answer);\n        // const answer = await pc2.createAnswer();\n        // await pc2.setLocalDescription(answer);\n        //socket.emit('answer_pc2', { id: id, answer });\n        //await pc1.setRemoteDescription(answer);\n        console.log(pc1);\n    })\n\n    socket.on('candidate', candidate => {\n        pc1.addIceCandidate(candidate)\n    })\n    \n    return (\n        <>\n            <div id=\"room-selection-container\" >\n                <input type=\"text\" onChange={e => setId(e.target.value)} />\n                <button onClick={e => connect()} >CONNECT</button>\n                <button onClick={e => call()}>CALL</button>\n                <button onClick={e => answer()} >ANSWER</button>\n            </div>\n\n            <div id=\"video-chat-container\">\n                Local <video id=\"local-video\" autoPlay></video>\n                Remote <video id=\"remote-video\" autoPlay></video>\n            </div >\n        </>\n    )\n\n}\n\nexport default App;","import React, { useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nfunction App3() {\r\n\r\n    const [id, setId] = useState();\r\n    const [offerData, setOfferData] = useState({});\r\n    const [answerData, setAnswerData] = useState({});\r\n    const [deviceID_0, setDeviceID_0] = useState('');\r\n    let socket = io('https://rtc-test-11.herokuapp.com');\r\n   // navigator.getUserMedia = navigator.getUserMedia | navigator.webkitGetUserMedia | navigator.mozGetUserMedia | navigator.msGetUserMedia;\r\n    let iceServers = [\r\n        { urls: 'stun:stun.l.google.com:19302' },\r\n        { urls: 'stun:stun1.l.google.com:19302' },\r\n        { urls: 'stun:stun2.l.google.com:19302' },\r\n        { urls: 'stun:stun3.l.google.com:19302' },\r\n        { urls: 'stun:stun4.l.google.com:19302' },\r\n    ]\r\n    const roomSelectionContainer = document.getElementById('room-selection-container')\r\n    const roomInput = document.getElementById('room-input')\r\n    const connectButton = document.getElementById('connect-button')\r\n\r\n    const videoChatContainer = document.getElementById('video-chat-container')\r\n    const localVideoComponent = document.getElementById('local-video')\r\n    const remoteVideoComponent = document.getElementById('remote-video')\r\n\r\n    const mediaConstraints = {\r\n        audio: true,\r\n        video: { width: 1280, height: 720 },\r\n    }\r\n\r\n    let localStream\r\n    let remoteStream\r\n    let isRoomCreator\r\n    let rtcPeerConnection // Connection between the local device and the remote peer.\r\n    let roomId\r\n\r\n    navigator.mediaDevices.enumerateDevices().then(device => {\r\n        console.log(device.filter(elem => elem.kind == 'videoinput'))\r\n    });\r\n\r\n\r\n    // BUTTON LISTENER ============================================================\r\n    let connect = () => {\r\n        joinRoom(id)\r\n    }\r\n\r\n    // SOCKET EVENT CALLBACKS =====================================================\r\n    socket.on('room_created', async () => {\r\n        console.log('Socket event callback: room_created')\r\n\r\n        await setLocalStream(mediaConstraints)\r\n        isRoomCreator = true\r\n    })\r\n\r\n    socket.on('room_joined', async () => {\r\n        console.log('Socket event callback: room_joined')\r\n\r\n        await setLocalStream(mediaConstraints)\r\n        socket.emit('start_call', roomId)\r\n    })\r\n\r\n    socket.on('full_room', () => {\r\n        console.log('Socket event callback: full_room')\r\n\r\n        alert('The room is full, please try another one')\r\n    })\r\n\r\n    socket.on('start_call', async () => {\r\n        console.log('Socket event callback: start_call')\r\n\r\n        if (isRoomCreator) {\r\n            rtcPeerConnection = new RTCPeerConnection(iceServers);\r\n            addLocalTracks(rtcPeerConnection);\r\n            rtcPeerConnection.ontrack = setRemoteStream;\r\n            rtcPeerConnection.onicecandidate = sendIceCandidate;\r\n            await createOffer(rtcPeerConnection);\r\n        }\r\n    })\r\n\r\n    socket.on('webrtc_offer', async (event) => {\r\n        console.log('Socket event callback: webrtc_offer');\r\n\r\n        if (!isRoomCreator) {\r\n            rtcPeerConnection = new RTCPeerConnection(iceServers);\r\n            addLocalTracks(rtcPeerConnection);\r\n            rtcPeerConnection.ontrack = setRemoteStream;\r\n            rtcPeerConnection.onicecandidate = sendIceCandidate;\r\n            rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(event));\r\n            await createAnswer(rtcPeerConnection);\r\n        }\r\n    })\r\n\r\n    socket.on('webrtc_answer', (event) => {\r\n        console.log('Socket event callback: webrtc_answer')\r\n\r\n        rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(event))\r\n    })\r\n\r\n    socket.on('webrtc_ice_candidate', (event) => {\r\n\r\n        var candidate = new RTCIceCandidate({\r\n            sdpMLineIndex: event.label,\r\n            candidate: event.candidate,\r\n        })\r\n        rtcPeerConnection.addIceCandidate(candidate)\r\n    })\r\n\r\n    // FUNCTIONS ==================================================================\r\n    function joinRoom(room) {\r\n        if (room === '') {\r\n            alert('Please type a room ID')\r\n        } else {\r\n            roomId = room\r\n            socket.emit('join', room)\r\n            showVideoConference()\r\n        }\r\n    }\r\n\r\n    function showVideoConference() {\r\n        roomSelectionContainer.style = 'display: none'\r\n        videoChatContainer.style = 'display: block'\r\n    }\r\n\r\n    async function setLocalStream(mediaConstraints) {\r\n\r\n\r\n        try {\r\n\r\n\r\n            let stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true, deviceId: deviceID_0 });\r\n            // console.log(device.filter(elem => elem.kind === 'videoinput')[0].deviceId)\r\n            localStream = stream\r\n            localVideoComponent.srcObject = stream\r\n\r\n            // console.log(deviceID_0);\r\n\r\n            // console.log((await navigator.mediaDevices.enumerateDevices()).filter(elem => elem.kind == 'videoinput'));\r\n\r\n        } catch (error) {\r\n            console.error('Could not get user media', error)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function addLocalTracks(rtcPeerConnection) {\r\n        localStream.getTracks().forEach((track) => {\r\n            rtcPeerConnection.addTrack(track, localStream)\r\n        })\r\n    }\r\n\r\n    async function createOffer(rtcPeerConnection) {\r\n        let sessionDescription\r\n        try {\r\n            sessionDescription = await rtcPeerConnection.createOffer()\r\n            rtcPeerConnection.setLocalDescription(sessionDescription)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n\r\n        socket.emit('webrtc_offer', {\r\n            type: 'webrtc_offer',\r\n            sdp: sessionDescription,\r\n            roomId,\r\n        })\r\n    }\r\n\r\n    async function createAnswer(rtcPeerConnection) {\r\n        let sessionDescription\r\n        try {\r\n            sessionDescription = await rtcPeerConnection.createAnswer()\r\n            rtcPeerConnection.setLocalDescription(sessionDescription)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n\r\n        socket.emit('webrtc_answer', {\r\n            type: 'webrtc_answer',\r\n            sdp: sessionDescription,\r\n            roomId,\r\n        })\r\n    }\r\n\r\n    function setRemoteStream(event) {\r\n        remoteVideoComponent.srcObject = event.streams[0]\r\n        remoteStream = event.stream\r\n    }\r\n\r\n    function sendIceCandidate(event) {\r\n        if (event.candidate) {\r\n            socket.emit('webrtc_ice_candidate', {\r\n                roomId,\r\n                label: event.candidate.sdpMLineIndex,\r\n                candidate: event.candidate.candidate,\r\n            })\r\n        }\r\n    }\r\n\r\n    let selectWebCam = (e) => {\r\n        setDeviceID_0(e.target.value);\r\n        console.log(deviceID_0);\r\n    }\r\n    return (\r\n        <>\r\n            <div id=\"room-selection-container\" className=\"centered\">\r\n                <input type='text' onChange={e => setDeviceID_0(e.target.value)} />\r\n                <input id=\"room-input\" type=\"text\" onChange={e => setId(e.target.value)} />\r\n                <button id=\"connect-button\" onClick={e => connect()}>CONNECT</button>\r\n            </div>\r\n\r\n            <div id=\"video-chat-container\" className=\"video-position\">\r\n                <video id=\"local-video\" autoPlay muted=\"muted\"></video>\r\n                <video id=\"remote-video\" autoPlay></video>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default App3;","import React, { useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nfunction App3() {\r\n\r\n    const [id, setId] = useState();\r\n    const [offerData, setOfferData] = useState({});\r\n    const [answerData, setAnswerData] = useState({});\r\n    const [deviceID_0, setDeviceID_0] = useState('');\r\n    let socket = io('https://rtc-test-11.herokuapp.com/');\r\n   // navigator.getUserMedia = navigator.getUserMedia | navigator.webkitGetUserMedia | navigator.mozGetUserMedia | navigator.msGetUserMedia;\r\n    let iceServers = [\r\n        { urls: 'stun:stun.l.google.com:19302' },\r\n        { urls: 'stun:stun1.l.google.com:19302' },\r\n        { urls: 'stun:stun2.l.google.com:19302' },\r\n        { urls: 'stun:stun3.l.google.com:19302' },\r\n        { urls: 'stun:stun4.l.google.com:19302' },\r\n    ]\r\n    const roomSelectionContainer = document.getElementById('room-selection-container')\r\n    const roomInput = document.getElementById('room-input')\r\n    const connectButton = document.getElementById('connect-button')\r\n\r\n    const videoChatContainer = document.getElementById('video-chat-container')\r\n    const localVideoComponent = document.getElementById('local-video')\r\n    const remoteVideoComponent = document.getElementById('remote-video')\r\n\r\n    const mediaConstraints = {\r\n        audio: true,\r\n        video: { width: 1280, height: 720 },\r\n    }\r\n\r\n    let localStream\r\n    let remoteStream\r\n    let isRoomCreator\r\n    let rtcPeerConnection // Connection between the local device and the remote peer.\r\n    let roomId\r\n\r\n    navigator.mediaDevices.enumerateDevices().then(device => {\r\n        console.log(device.filter(elem => elem.kind == 'videoinput'))\r\n    });\r\n\r\n\r\n    // BUTTON LISTENER ============================================================\r\n    let connect = () => {\r\n        joinRoom(id)\r\n    }\r\n\r\n    // SOCKET EVENT CALLBACKS =====================================================\r\n    socket.on('room_created', async () => {\r\n        console.log('Socket event callback: room_created')\r\n\r\n        await setLocalStream(mediaConstraints)\r\n        isRoomCreator = true\r\n    })\r\n\r\n    socket.on('room_joined', async () => {\r\n        console.log('Socket event callback: room_joined')\r\n\r\n        await setLocalStream(mediaConstraints)\r\n        socket.emit('start_call', roomId)\r\n    })\r\n\r\n    socket.on('full_room', () => {\r\n        console.log('Socket event callback: full_room')\r\n\r\n        alert('The room is full, please try another one')\r\n    })\r\n\r\n    socket.on('start_call', async () => {\r\n        console.log('Socket event callback: start_call')\r\n\r\n        if (isRoomCreator) {\r\n            rtcPeerConnection = new RTCPeerConnection(iceServers);\r\n            addLocalTracks(rtcPeerConnection);\r\n            rtcPeerConnection.ontrack = setRemoteStream;\r\n            rtcPeerConnection.onicecandidate = sendIceCandidate;\r\n            await createOffer(rtcPeerConnection);\r\n        }\r\n    })\r\n\r\n    socket.on('webrtc_offer', async (event) => {\r\n        console.log('Socket event callback: webrtc_offer');\r\n\r\n        if (!isRoomCreator) {\r\n            rtcPeerConnection = new RTCPeerConnection(iceServers);\r\n            addLocalTracks(rtcPeerConnection);\r\n            rtcPeerConnection.ontrack = setRemoteStream;\r\n            rtcPeerConnection.onicecandidate = sendIceCandidate;\r\n            rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(event));\r\n            await createAnswer(rtcPeerConnection);\r\n        }\r\n    })\r\n\r\n    socket.on('webrtc_answer', (event) => {\r\n        console.log('Socket event callback: webrtc_answer')\r\n\r\n        rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(event))\r\n    })\r\n\r\n    socket.on('webrtc_ice_candidate', (event) => {\r\n\r\n        var candidate = new RTCIceCandidate({\r\n            sdpMLineIndex: event.label,\r\n            candidate: event.candidate,\r\n        })\r\n        rtcPeerConnection.addIceCandidate(candidate)\r\n    })\r\n\r\n    // FUNCTIONS ==================================================================\r\n    function joinRoom(room) {\r\n        if (room === '') {\r\n            alert('Please type a room ID')\r\n        } else {\r\n            roomId = room\r\n            socket.emit('join', room)\r\n            showVideoConference()\r\n        }\r\n    }\r\n\r\n    function showVideoConference() {\r\n        roomSelectionContainer.style = 'display: none'\r\n        videoChatContainer.style = 'display: block'\r\n    }\r\n\r\n    async function setLocalStream(mediaConstraints) {\r\n\r\n\r\n        try {\r\n\r\n\r\n            let stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true, deviceId: deviceID_0 });\r\n            // console.log(device.filter(elem => elem.kind === 'videoinput')[0].deviceId)\r\n            localStream = stream\r\n            localVideoComponent.srcObject = stream\r\n\r\n            // console.log(deviceID_0);\r\n\r\n            // console.log((await navigator.mediaDevices.enumerateDevices()).filter(elem => elem.kind == 'videoinput'));\r\n\r\n        } catch (error) {\r\n            console.error('Could not get user media', error)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function addLocalTracks(rtcPeerConnection) {\r\n        localStream.getTracks().forEach((track) => {\r\n            rtcPeerConnection.addTrack(track, localStream)\r\n        })\r\n    }\r\n\r\n    async function createOffer(rtcPeerConnection) {\r\n        let sessionDescription\r\n        try {\r\n            sessionDescription = await rtcPeerConnection.createOffer()\r\n            rtcPeerConnection.setLocalDescription(sessionDescription)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n\r\n        socket.emit('webrtc_offer', {\r\n            type: 'webrtc_offer',\r\n            sdp: sessionDescription,\r\n            roomId,\r\n        })\r\n    }\r\n\r\n    async function createAnswer(rtcPeerConnection) {\r\n        let sessionDescription\r\n        try {\r\n            sessionDescription = await rtcPeerConnection.createAnswer()\r\n            rtcPeerConnection.setLocalDescription(sessionDescription)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n\r\n        socket.emit('webrtc_answer', {\r\n            type: 'webrtc_answer',\r\n            sdp: sessionDescription,\r\n            roomId,\r\n        })\r\n    }\r\n\r\n    function setRemoteStream(event) {\r\n        remoteVideoComponent.srcObject = event.streams[0]\r\n        remoteStream = event.stream\r\n    }\r\n\r\n    function sendIceCandidate(event) {\r\n        if (event.candidate) {\r\n            socket.emit('webrtc_ice_candidate', {\r\n                roomId,\r\n                label: event.candidate.sdpMLineIndex,\r\n                candidate: event.candidate.candidate,\r\n            })\r\n        }\r\n    }\r\n\r\n    let selectWebCam = (e) => {\r\n        setDeviceID_0(e.target.value);\r\n        console.log(deviceID_0);\r\n    }\r\n    return (\r\n        <>\r\n            <div id=\"room-selection-container\" className=\"centered\">\r\n                <input type='text' onChange={e => setDeviceID_0(e.target.value)} />\r\n                <input id=\"room-input\" type=\"text\" onChange={e => setId(e.target.value)} />\r\n                <button id=\"connect-button\" onClick={e => connect()}>CONNECT</button>\r\n            </div>\r\n\r\n            <div id=\"video-chat-container\" className=\"video-position\">\r\n                <video id=\"local-video\" autoPlay muted=\"muted\"></video>\r\n                <video id=\"remote-video\" autoPlay></video>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default App3;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport App2 from './App2';\r\nimport App3 from './App3';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Route, BrowserRouter, Switch } from 'react-router-dom'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path='/c1' component={App} />\r\n        <Route path='/c2' component={App2} />\r\n        <Route path='/c3' component={App3} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}